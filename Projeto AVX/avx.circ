<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="3.4.1" version="1.0">
  This file is intended to be loaded by Logisim-evolution (https://github.com/reds-heig/logisim-evolution).

  <lib desc="#Wiring" name="0">
    <tool name="Pin">
      <a name="appearance" val="NewPins"/>
    </tool>
    <tool name="Probe">
      <a name="appearance" val="NewPins"/>
    </tool>
  </lib>
  <lib desc="#Gates" name="1">
    <tool name="PLA">
      <a name="table" val=""/>
    </tool>
  </lib>
  <lib desc="#Plexers" name="2">
    <tool name="Multiplexer">
      <a name="enable" val="false"/>
    </tool>
    <tool name="Demultiplexer">
      <a name="enable" val="false"/>
    </tool>
  </lib>
  <lib desc="#Arithmetic" name="3"/>
  <lib desc="#Memory" name="4">
    <tool name="D Flip-Flop">
      <a name="appearance" val="logisim_evolution"/>
    </tool>
    <tool name="T Flip-Flop">
      <a name="appearance" val="logisim_evolution"/>
    </tool>
    <tool name="J-K Flip-Flop">
      <a name="appearance" val="logisim_evolution"/>
    </tool>
    <tool name="S-R Flip-Flop">
      <a name="appearance" val="logisim_evolution"/>
    </tool>
    <tool name="Register">
      <a name="appearance" val="logisim_evolution"/>
    </tool>
    <tool name="Counter">
      <a name="appearance" val="logisim_evolution"/>
    </tool>
    <tool name="Shift Register">
      <a name="appearance" val="logisim_evolution"/>
    </tool>
    <tool name="Random">
      <a name="appearance" val="logisim_evolution"/>
    </tool>
    <tool name="RAM">
      <a name="appearance" val="logisim_evolution"/>
    </tool>
    <tool name="ROM">
      <a name="appearance" val="logisim_evolution"/>
      <a name="contents">addr/data: 8 8
0
</a>
    </tool>
  </lib>
  <lib desc="#I/O" name="5"/>
  <lib desc="#TTL" name="6"/>
  <lib desc="#TCL" name="7">
    <tool name="TclGeneric">
      <a name="content">library ieee;&#13;
use ieee.std_logic_1164.all;&#13;
&#13;
entity TCL_Generic is&#13;
  port(&#13;
    --Insert input ports below&#13;
    horloge_i  : in  std_logic;                    -- input bit example&#13;
    val_i      : in  std_logic_vector(3 downto 0); -- input vector example&#13;
&#13;
	  --Insert output ports below&#13;
    max_o      : out std_logic;                    -- output bit example&#13;
    cpt_o      : out std_logic_Vector(3 downto 0)  -- output vector example&#13;
  );&#13;
end TCL_Generic;&#13;
</a>
    </tool>
  </lib>
  <lib desc="#Base" name="8">
    <tool name="Text Tool">
      <a name="font" val="SansSerif plain 12"/>
      <a name="halign" val="center"/>
      <a name="text" val=""/>
      <a name="valign" val="base"/>
    </tool>
  </lib>
  <lib desc="#BFH-Praktika" name="9"/>
  <lib desc="#Input/Output-Extra" name="10"/>
  <lib desc="#Soc" name="11">
    <tool name="Rv32im">
      <a name="SocBusSelection" val=""/>
    </tool>
    <tool name="Nios2">
      <a name="SocBusSelection" val=""/>
    </tool>
    <tool name="SocBus">
      <a name="SocBusIdentifier" val="0x0000018F896F10E456910dae"/>
    </tool>
    <tool name="Socmem">
      <a name="SocBusSelection" val=""/>
    </tool>
    <tool name="SocPio">
      <a name="SocBusSelection" val=""/>
    </tool>
    <tool name="SocVga">
      <a name="SocBusSelection" val=""/>
    </tool>
    <tool name="SocJtagUart">
      <a name="SocBusSelection" val=""/>
    </tool>
  </lib>
  <main name="main"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
  </options>
  <mappings>
    <tool lib="8" map="Button2" name="Menu Tool"/>
    <tool lib="8" map="Button3" name="Menu Tool"/>
    <tool lib="8" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="8" name="Poke Tool"/>
    <tool lib="8" name="Edit Tool"/>
    <tool lib="8" name="Wiring Tool"/>
    <tool lib="8" name="Text Tool">
      <a name="font" val="SansSerif plain 12"/>
      <a name="halign" val="center"/>
      <a name="text" val=""/>
      <a name="valign" val="base"/>
    </tool>
    <sep/>
    <tool lib="0" name="Pin">
      <a name="appearance" val="NewPins"/>
    </tool>
    <tool lib="0" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </tool>
    <sep/>
    <tool lib="1" name="NOT Gate"/>
    <tool lib="1" name="AND Gate"/>
    <tool lib="1" name="OR Gate"/>
    <tool lib="1" name="XOR Gate"/>
    <tool lib="1" name="NAND Gate"/>
    <tool lib="1" name="NOR Gate"/>
    <sep/>
    <tool lib="4" name="D Flip-Flop">
      <a name="appearance" val="logisim_evolution"/>
    </tool>
    <tool lib="4" name="Register">
      <a name="appearance" val="logisim_evolution"/>
    </tool>
  </toolbar>
  <circuit name="main">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="main"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="circuitvhdlpath" val=""/>
    <a name="clabel" val="S_o"/>
    <a name="clabelfont" val="SansSerif bold 16"/>
    <a name="clabelup" val="east"/>
    <comp lib="0" loc="(140,250)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="B_i"/>
      <a name="width" val="32"/>
    </comp>
    <comp lib="0" loc="(160,140)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="A_i"/>
      <a name="width" val="32"/>
    </comp>
    <comp lib="0" loc="(200,310)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="mode_i"/>
    </comp>
    <comp lib="0" loc="(200,330)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="vecSize_i"/>
      <a name="width" val="2"/>
    </comp>
    <comp lib="0" loc="(610,270)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="S_o"/>
      <a name="output" val="true"/>
      <a name="width" val="32"/>
    </comp>
    <comp loc="(480,270)" name="Adder_Subtractor">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <wire from="(140,250)" to="(150,250)"/>
    <wire from="(150,250)" to="(150,290)"/>
    <wire from="(150,290)" to="(260,290)"/>
    <wire from="(160,140)" to="(170,140)"/>
    <wire from="(170,140)" to="(170,270)"/>
    <wire from="(170,270)" to="(260,270)"/>
    <wire from="(200,310)" to="(250,310)"/>
    <wire from="(200,330)" to="(250,330)"/>
    <wire from="(250,300)" to="(250,310)"/>
    <wire from="(250,300)" to="(260,300)"/>
    <wire from="(250,320)" to="(250,330)"/>
    <wire from="(250,320)" to="(260,320)"/>
    <wire from="(260,300)" to="(260,310)"/>
    <wire from="(260,320)" to="(260,330)"/>
    <wire from="(480,270)" to="(610,270)"/>
  </circuit>
  <vhdl name="Adder_Subtractor">library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity Adder_Subtractor is
    Port (
        A_i       : in  STD_LOGIC_VECTOR (31 downto 0);
        B_i       : in  STD_LOGIC_VECTOR (31 downto 0);
        mode_i    : in  STD_LOGIC; -- 0 para adicão, 1 para subtração
        vecSize_i : in  STD_LOGIC_VECTOR (1 downto 0); -- 00=4 bits, 01=8 bits, 10=16 bits, 11=32 bits
        S_o       : out STD_LOGIC_VECTOR (31 downto 0)
    );
end Adder_Subtractor;

architecture Behavioral of Adder_Subtractor is
    signal A, B, B_comp, B_mux, Sum : STD_LOGIC_VECTOR (31 downto 0);
begin

    -- Processo para ajustar os tamanhos dos vetores
    process(A_i, B_i, vecSize_i)
    begin
        case vecSize_i is
            when "00" =&gt;
                A &lt;= (31 downto 4 =&gt; '0') &amp; A_i(3 downto 0);
                B &lt;= (31 downto 4 =&gt; '0') &amp; B_i(3 downto 0);
            when "01" =&gt;
                A &lt;= (31 downto 8 =&gt; '0') &amp; A_i(7 downto 0);
                B &lt;= (31 downto 8 =&gt; '0') &amp; B_i(7 downto 0);
            when "10" =&gt;
                A &lt;= (31 downto 16 =&gt; '0') &amp; A_i(15 downto 0);
                B &lt;= (31 downto 16 =&gt; '0') &amp; B_i(15 downto 0);
            when others =&gt;
                A &lt;= A_i;
                B &lt;= B_i;
        end case;
    end process;

    -- Processo para definir o operando B baseado no modo (adição/subtração)
    process(B, mode_i)
    begin
        if mode_i = '1' then
            B_comp &lt;= NOT B; -- Complemento de B
        else
            B_comp &lt;= B;
        end if;
    end process;

    -- Mux para selecionar entre B e B_comp
    B_mux &lt;= B_comp when mode_i = '1' else B;

    -- Adição/subtração
    process(A, B_mux, mode_i)
    begin
        if mode_i = '1' then
            -- Subtração
            Sum &lt;= A + B_mux + "00000000000000000000000000000001"; -- Adiciona 1 para o complemento de 2
        else
            -- Adição
            Sum &lt;= A + B_mux;
        end if;
    end process;

    -- Saída ajustada de acordo com o tamanho do vetor
    process(Sum, vecSize_i)
    begin
        case vecSize_i is
            when "00" =&gt;
                S_o &lt;= (31 downto 4 =&gt; '0') &amp; Sum(3 downto 0);
            when "01" =&gt;
                S_o &lt;= (31 downto 8 =&gt; '0') &amp; Sum(7 downto 0);
            when "10" =&gt;
                S_o &lt;= (31 downto 16 =&gt; '0') &amp; Sum(15 downto 0);
            when others =&gt;
                S_o &lt;= Sum;
        end case;
    end process;

end Behavioral;
</vhdl>
</project>
